params {

        /*
        Input Files
        ---------------------------
        */
        fastq = 'data/fastq/*_{1,2}.*'
        reference = 'data/reference/*.fasta'
        md = 'data/*.md'

        /*
        Sort-Read Assemblers
        ---------------------------
        */
        //abyss
        abyss = true
        abyssKmerSize = 96
        abyssBloomSize = '2G'

        //BCALM2
        bcalm = true
        bcalmKmerSize = 31

        //GATB Minia Pipeline
        gatb_minia = true
        gatbKmerSize = '21,61,101,141,181'
        gatb_besst_iter = 10000
        gatb_error_correction = false

        //IDBA-UD
        idba = true

        //METAHIPMER2
        metahipmer2 = true
        metahipmer2KmerSize = '21,33,55,77,99'

        //Minia
        minia = true
        miniaKmerSize = 31

        //MEGAHIT
        megahit = true
        megahitKmerSize = '21,29,39,59,79,99,119,141'

        //metaSPAdes
        metaspades = true
        metaspadesKmerSize = 'auto'

        //SPAdes
        spades = true
        spadesKmerSize = 'auto'

        //SKESA
        skesa = true

        //Unicycler
        unicycler = true

        //VelvetOptimiser
        velvetoptimiser = true
        velvetoptimiser_hashs = 19
        velvetoptimiser_hashe = 31

        /*
        Assembly Quality Control
        */
        minLength = 1000
        mapped_reads_threshold = 0.75

        /*
        Quality Parameters
        */
        n_target = 0.5
        l_target = 0.9
        plot_scale = 'log'

        /* 
        Execution related defaults
        */
        // process resources defaults
        cpus = 8
        memory = 32.Gb
        time = 24.h

        // max resources limits defaults
        max_cpus = 32
        max_memory = 100.Gb
        max_time = 72.h
}

process {
        cpus = params.cpus
        memory = params.memory

        withLabel:process_assembly {
                cpus = { check_max( params.cpus * task.attempt, 'cpus' ) }
                memory = { check_max( params.memory * task.attempt, 'memory' ) }
                time = { check_max( params.time * task.attempt, 'time' ) }
        }
        withLabel:process_mapping {
                cpus = { check_max( params.cpus * task.attempt, 'cpus' ) }
                memory = { check_max( params.memory * task.attempt, 'memory' ) }
                time = { check_max( params.time * task.attempt, 'time' ) }
        }
        withLabel:process_script {
                cpus = { check_max( 2 * task.attempt, 'cpus' ) }
                memory = { check_max( 8.Gb * task.attempt, 'memory' ) }
                time = { check_max( params.time * task.attempt, 'time' ) }
        }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}